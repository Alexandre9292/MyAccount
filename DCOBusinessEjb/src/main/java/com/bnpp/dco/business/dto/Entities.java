package com.bnpp.dco.business.dto;

// Generated 25 juil. 2014 18:11:35 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Entities generated by hbm2java
 */
@Entity
@Table(name = "entities", catalog = "dco")
public class Entities implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    private Integer id;
    private Address addressByAddress;
    private ThirdParty thirdParty;
    private ThirdParty thirdParty2;
    private ParamFunc paramFunc;
    private Address addressByIdAddressMailing;
    private String label;
    private String country;
    private String bankContact;
    private String taxResidenceCode;
    private String commercialRegister;
    private String taxInformation;
    private String registrationCountry;
    private Date boardResolutionDate;
    private String notaryName;
    private String notaryCity;
    private Date issuanceDate;
    private String publicDeedReference;
    private Date mercantileInscriptionDate;
    private Integer mercantileInscriptionNumber;
    private String legalStatusOther;
    private String countryIncorp;
    private Set accountForms = new HashSet(0);
    private Set thirdParties = new HashSet(0);
    private Set users = new HashSet(0);
    private Set paramTeches = new HashSet(0);
    private Contact contact1;
    private Contact contact2;
    private Set representativesList;
    private Set account = new HashSet(0);

	public Entities() {
    }

    public Entities(final String label) {
        this.label = label;
    }

    public Entities(final Address addressByAddress, final ThirdParty thirdParty, final ParamFunc paramFunc,
            final Address addressByIdAddressMailing, final String label, final String country,
            final String bankContact, final String taxResidenceCode, final String naceCode,
            final String commercialRegister, final String taxInformation, final String registrationCountry,
            final Date boardResolutionDate, final String notaryName, final String notaryCity,
            final Date issuanceDate, final String publicDeedReference, final Date mercantileInscriptionDate,
            final Integer mercantileInscriptionNumber, final String legalStatusOther, final Set accountForms,
            final Set thirdParties, final Set users, final Set paramTeches) {
        this.addressByAddress = addressByAddress;
        this.thirdParty = thirdParty;
        this.paramFunc = paramFunc;
        this.addressByIdAddressMailing = addressByIdAddressMailing;
        this.label = label;
        this.country = country;
        this.bankContact = bankContact;
        this.taxResidenceCode = taxResidenceCode;
        this.commercialRegister = commercialRegister;
        this.taxInformation = taxInformation;
        this.registrationCountry = registrationCountry;
        this.boardResolutionDate = boardResolutionDate;
        this.notaryName = notaryName;
        this.notaryCity = notaryCity;
        this.issuanceDate = issuanceDate;
        this.publicDeedReference = publicDeedReference;
        this.mercantileInscriptionDate = mercantileInscriptionDate;
        this.mercantileInscriptionNumber = mercantileInscriptionNumber;
        this.legalStatusOther = legalStatusOther;
        this.accountForms = accountForms;
        this.thirdParties = thirdParties;
        this.users = users;
        this.paramTeches = paramTeches;
    }

    public Entities(final Address addressByAddress, final ThirdParty thirdParty, final ThirdParty thirdParty2,
            final ParamFunc paramFunc, final Address addressByIdAddressMailing, final String label,
            final String country, final String bankContact, final String taxResidenceCode, final String naceCode,
            final String commercialRegister, final String taxInformation, final String registrationCountry,
            final Date boardResolutionDate, final String notaryName, final String notaryCity,
            final Date issuanceDate, final String publicDeedReference, final Date mercantileInscriptionDate,
            final Integer mercantileInscriptionNumber, final String legalStatusOther, final Set accountForms,
            final Set thirdParties, final Set users, final Set paramTeches) {
        this.addressByAddress = addressByAddress;
        this.thirdParty = thirdParty;
        this.thirdParty2 = thirdParty2;
        this.paramFunc = paramFunc;
        this.addressByIdAddressMailing = addressByIdAddressMailing;
        this.label = label;
        this.country = country;
        this.bankContact = bankContact;
        this.taxResidenceCode = taxResidenceCode;
        this.commercialRegister = commercialRegister;
        this.taxInformation = taxInformation;
        this.registrationCountry = registrationCountry;
        this.boardResolutionDate = boardResolutionDate;
        this.notaryName = notaryName;
        this.notaryCity = notaryCity;
        this.issuanceDate = issuanceDate;
        this.publicDeedReference = publicDeedReference;
        this.mercantileInscriptionDate = mercantileInscriptionDate;
        this.mercantileInscriptionNumber = mercantileInscriptionNumber;
        this.legalStatusOther = legalStatusOther;
        this.accountForms = accountForms;
        this.thirdParties = thirdParties;
        this.users = users;
        this.paramTeches = paramTeches;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(final Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ADDRESS")
    public Address getAddressByAddress() {
        return this.addressByAddress;
    }

    public void setAddressByAddress(final Address addressByAddress) {
        this.addressByAddress = addressByAddress;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTACT")
    public ThirdParty getThirdParty() {
        return this.thirdParty;
    }

    public void setThirdParty(final ThirdParty thirdParty) {
        this.thirdParty = thirdParty;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTACT2")
    public ThirdParty getThirdParty2() {
        return this.thirdParty2;
    }

    public void setThirdParty2(final ThirdParty thirdParty2) {
        this.thirdParty2 = thirdParty2;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_LEGAL_STATUS")
    public ParamFunc getParamFunc() {
        return this.paramFunc;
    }

    public void setParamFunc(final ParamFunc paramFunc) {
        this.paramFunc = paramFunc;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_ADDRESS_MAILING")
    public Address getAddressByIdAddressMailing() {
        return this.addressByIdAddressMailing;
    }

    public void setAddressByIdAddressMailing(final Address addressByIdAddressMailing) {
        this.addressByIdAddressMailing = addressByIdAddressMailing;
    }

    @Column(name = "LABEL", nullable = false, length = 50)
    public String getLabel() {
        return this.label;
    }

    public void setLabel(final String label) {
        this.label = label;
    }

    @Column(name = "COUNTRY", length = 10)
    public String getCountry() {
        return this.country;
    }

    public void setCountry(final String country) {
        this.country = country;
    }

    @Column(name = "BANK_CONTACT", length = 100)
    public String getBankContact() {
        return this.bankContact;
    }

    public void setBankContact(final String bankContact) {
        this.bankContact = bankContact;
    }

    @Column(name = "TAX_RESIDENCE_CODE", length = 50)
    public String getTaxResidenceCode() {
        return this.taxResidenceCode;
    }

    public void setTaxResidenceCode(final String taxResidenceCode) {
        this.taxResidenceCode = taxResidenceCode;
    }

    @Column(name = "COMMERCIAL_REGISTER", length = 100)
    public String getCommercialRegister() {
        return this.commercialRegister;
    }

    public void setCommercialRegister(final String commercialRegister) {
        this.commercialRegister = commercialRegister;
    }

    @Column(name = "TAX_INFORMATION", length = 100)
    public String getTaxInformation() {
        return this.taxInformation;
    }

    public void setTaxInformation(final String taxInformation) {
        this.taxInformation = taxInformation;
    }

    @Column(name = "REGISTRATION_COUNTRY", length = 100)
    public String getRegistrationCountry() {
        return this.registrationCountry;
    }

    public void setRegistrationCountry(final String registrationCountry) {
        this.registrationCountry = registrationCountry;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "BOARD_RESOLUTION_DATE", length = 19)
    public Date getBoardResolutionDate() {
        return this.boardResolutionDate;
    }

    public void setBoardResolutionDate(final Date boardResolutionDate) {
        this.boardResolutionDate = boardResolutionDate;
    }

    @Column(name = "NOTARY_NAME", length = 50)
    public String getNotaryName() {
        return this.notaryName;
    }

    public void setNotaryName(final String notaryName) {
        this.notaryName = notaryName;
    }

    @Column(name = "NOTARY_CITY", length = 50)
    public String getNotaryCity() {
        return this.notaryCity;
    }

    public void setNotaryCity(final String notaryCity) {
        this.notaryCity = notaryCity;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "ISSUANCE_DATE", length = 19)
    public Date getIssuanceDate() {
        return this.issuanceDate;
    }

    public void setIssuanceDate(final Date issuanceDate) {
        this.issuanceDate = issuanceDate;
    }

    @Column(name = "PUBLIC_DEED_REFERENCE", length = 50)
    public String getPublicDeedReference() {
        return this.publicDeedReference;
    }

    public void setPublicDeedReference(final String publicDeedReference) {
        this.publicDeedReference = publicDeedReference;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "MERCANTILE_INSCRIPTION_DATE", length = 19)
    public Date getMercantileInscriptionDate() {
        return this.mercantileInscriptionDate;
    }

    public void setMercantileInscriptionDate(final Date mercantileInscriptionDate) {
        this.mercantileInscriptionDate = mercantileInscriptionDate;
    }

    @Column(name = "MERCANTILE_INSCRIPTION_NUMBER")
    public Integer getMercantileInscriptionNumber() {
        return this.mercantileInscriptionNumber;
    }

    public void setMercantileInscriptionNumber(final Integer mercantileInscriptionNumber) {
        this.mercantileInscriptionNumber = mercantileInscriptionNumber;
    }

    @Column(name = "LEGAL_STATUS_OTHER", length = 50)
    public String getLegalStatusOther() {
        return this.legalStatusOther;
    }

    public void setLegalStatusOther(final String legalStatusOther) {
        this.legalStatusOther = legalStatusOther;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "entities")
    public Set<AccountForm> getAccountForms() {
        return this.accountForms;
    }

    public void setAccountForms(final Set accountForms) {
        this.accountForms = accountForms;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "entity_legal_representative", catalog = "dco", joinColumns = {@JoinColumn(name = "ENTITY", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "THIRD_PARTY", nullable = false, updatable = false)})
    public Set<ThirdParty> getThirdParties() {
        return this.thirdParties;
    }

    public void setThirdParties(final Set thirdParties) {
        this.thirdParties = thirdParties;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_entity", catalog = "dco", joinColumns = {@JoinColumn(name = "ENTITY", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "USER", nullable = false, updatable = false)})
    public Set<User> getUsers() {
        return this.users;
    }

    public void setUsers(final Set users) {
        this.users = users;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "entities")
    public Set<ParamTech> getParamTeches() {
        return this.paramTeches;
    }

    public void setParamTeches(final Set paramTeches) {
        this.paramTeches = paramTeches;
    }

	/**
	 * @return the countryIncorp
	 */
	@Column(name = "COUNTRY_INCORP", length = 45)
	public String getCountryIncorp() {
		return countryIncorp;
	}

	/**
	 * @param countryIncorp the countryIncorp to set
	 */
	public void setCountryIncorp(String countryIncorp) {
		this.countryIncorp = countryIncorp;
	}

	/**
	 * @return the contact1
	 */
	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTACT_1")
	public Contact getContact1() {
		return contact1;
	}

	/**
	 * @param contact1 the contact1 to set
	 */
	public void setContact1(Contact contact1) {
		this.contact1 = contact1;
	}

	/**
	 * @return the contact2
	 */
	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTACT_2")
	public Contact getContact2() {
		return contact2;
	}

	/**
	 * @param contact2 the contact2 to set
	 */
	public void setContact2(Contact contact2) {
		this.contact2 = contact2;
	}

	/**
	 * @return the representative
	 */
	@ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "entity_representative", catalog = "dco", joinColumns = {@JoinColumn(name = "entities_ID", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "representative_ID", nullable = false, updatable = false)})
    public Set<Representatives> getRepresentativesList() {
		return representativesList;
	}

	/**
	 * @param representative the representative to set
	 */
	public void setRepresentativesList(Set representativesList) {
		this.representativesList = representativesList;
	}

	/**
	 * @return the account
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "entity")
    public Set<Account> getAccount() {
		return account;
	}

	/**
	 * @param account the account to set
	 */
	public void setAccount(Set account) {
		this.account = account;
	}

}
