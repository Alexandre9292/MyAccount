package com.bnpp.dco.business.dto;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * ParamFunc generated by hbm2java
 */
@Entity
@Table(name = "param_func", catalog = "dco", uniqueConstraints = @UniqueConstraint(columnNames = {"TYPE",
        "COUNTRY", "LANGUAGE", "ENTRY"}))
public class ParamFunc implements java.io.Serializable {

    /** Serial. */
    private static final long serialVersionUID = 1L;
    private Integer id;
    private String country;
    private Language language;
    private ParamFuncType paramFuncType;
    private String entry;
    private String value;
    private Set accountsForIdCurrency = new HashSet(0);
    private Set accountsForIdPeriodicity = new HashSet(0);
    private Set accountsForIdChannel = new HashSet(0);
//    private Set accountThirdParties = new HashSet(0);
    private Set accountsForIdStatementType = new HashSet(0);
    private Set accountsForIdTypeAccount = new HashSet(0);
    private Set entitieses = new HashSet(0);

    public ParamFunc() {
    }

    public ParamFunc(final String country, final Language language, final ParamFuncType paramFuncType,
            final String entry, final String value) {
        this.country = country;
        this.language = language;
        this.paramFuncType = paramFuncType;
        this.entry = entry;
        this.value = value;
    }

    public ParamFunc(final String country, final Language language, final ParamFuncType paramFuncType,
            final String entry, final String value, final Set accountsForIdPeriodicity,
            final Set accountsForIdCurrency, final Set accountThirdParties, final Set accountsForIdStatementType,
            final Set thirdParties, final Set accountsForIdTypeAccount, final Set entitieses) {
        this.country = country;
        this.language = language;
        this.paramFuncType = paramFuncType;
        this.entry = entry;
        this.value = value;
        this.accountsForIdCurrency = accountsForIdCurrency;
        this.accountsForIdPeriodicity = accountsForIdPeriodicity;
//        this.accountThirdParties = accountThirdParties;
        this.accountsForIdStatementType = accountsForIdStatementType;
        this.accountsForIdTypeAccount = accountsForIdTypeAccount;
        this.entitieses = entitieses;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(final Integer id) {
        this.id = id;
    }

    @Column(name = "COUNTRY", nullable = false, length = 100)
    public String getCountry() {
        return this.country;
    }

    public void setCountry(final String country) {
        this.country = country;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "LANGUAGE", nullable = false)
    public Language getLanguage() {
        return this.language;
    }

    public void setLanguage(final Language language) {
        this.language = language;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TYPE", nullable = false)
    public ParamFuncType getParamFuncType() {
        return this.paramFuncType;
    }

    public void setParamFuncType(final ParamFuncType paramFuncType) {
        this.paramFuncType = paramFuncType;
    }

    @Column(name = "ENTRY", nullable = false, length = 100)
    public String getEntry() {
        return this.entry;
    }

    public void setEntry(final String entry) {
        this.entry = entry;
    }

    @Column(name = "VALUE", nullable = false, length = 100)
    public String getValue() {
        return this.value;
    }

    public void setValue(final String value) {
        this.value = value;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paramFuncByIdCurrency")
    public Set<Account> getAccountsForIdCurrency() {
        return this.accountsForIdCurrency;
    }

    public void setAccountsForIdCurrency(final Set accountsForIdCurrency) {
        this.accountsForIdCurrency = accountsForIdCurrency;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paramFuncByIdPeriodicity")
    public Set<Account> getAccountsForIdPeriodicity() {
        return this.accountsForIdPeriodicity;
    }

    public void setAccountsForIdPeriodicity(final Set accountsForIdPeriodicity) {
        this.accountsForIdPeriodicity = accountsForIdPeriodicity;
    }

//    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paramFunc")
//    public Set<AccountThirdParty> getAccountThirdParties() {
//        return this.accountThirdParties;
//    }
//
//    public void setAccountThirdParties(final Set accountThirdParties) {
//        this.accountThirdParties = accountThirdParties;
//    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "account_statement_type", catalog = "dco", joinColumns = {@JoinColumn(name = "STATEMENT_TYPE", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "ACCOUNT", nullable = false, updatable = false)})
    public Set<Account> getAccountsForIdStatementType() {
        return this.accountsForIdStatementType;
    }

    public void setAccountsForIdStatementType(final Set accountsForIdStatementType) {
        this.accountsForIdStatementType = accountsForIdStatementType;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paramFuncByIdTypeAccount")
    public Set<Account> getAccountsForIdTypeAccount() {
        return this.accountsForIdTypeAccount;
    }

    public void setAccountsForIdTypeAccount(final Set accountsForIdTypeAccount) {
        this.accountsForIdTypeAccount = accountsForIdTypeAccount;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paramFunc")
    public Set<Entities> getEntitieses() {
        return this.entitieses;
    }

    public void setEntitieses(final Set entitieses) {
        this.entitieses = entitieses;
    }

	/**
	 * @return the accountsForIdChannel
	 */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "paramFuncByIdChannel")
    public Set<Account> getAccountsForIdChannel() {
		return accountsForIdChannel;
	}

	/**
	 * @param accountsForIdChannel the accountsForIdChannel to set
	 */
	public void setAccountsForIdChannel(Set accountsForIdChannel) {
		this.accountsForIdChannel = accountsForIdChannel;
	}

}
