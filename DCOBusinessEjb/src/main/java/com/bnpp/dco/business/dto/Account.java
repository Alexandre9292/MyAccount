package com.bnpp.dco.business.dto;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account", catalog = "dco")
public class Account implements java.io.Serializable {

    /** Serial. */
    private static final long serialVersionUID = 1L;
    private Integer id;
    private AccountForm accountForm;
    private Address address;
    private ParamFunc paramFuncByIdPeriodicity;
    private ParamFunc paramFuncByIdChannel;
    private ParamFunc paramFuncByIdCurrency;
    private ParamFunc paramFuncByIdTypeAccount;
    private String reference;
    private String registerCompanyNumber;
    private String country;
    private Country countryAccount;
//    private Set accountThirdParties = new HashSet(0);
    private Set statementTypes = new HashSet(0);
    private String vatNumberAccount;
    private Language idComLanguage;
    private String branchName;
    private Set rules = new HashSet(0);
    private Entities entity;
    private String name;
    private Date creationDate;
    private Date editDate;
    private Integer pourcentage;
    private String strategyDocument;
    private String channel;
    private Set college = new HashSet(0);
    private Set signatory = new HashSet(0);

	public Account() {
    }

    public Account(final AccountForm accountForm, final Country countryAccount,
            final ParamFunc paramFuncByIdPeriodicity, final ParamFunc paramFuncByIdCurrency,
            final ParamFunc paramFuncByIdTypeAccount, final String reference) {
        this.accountForm = accountForm;
        this.countryAccount = countryAccount;
        this.paramFuncByIdPeriodicity = paramFuncByIdPeriodicity;
        this.paramFuncByIdCurrency = paramFuncByIdCurrency;
        this.paramFuncByIdTypeAccount = paramFuncByIdTypeAccount;
        this.reference = reference;
    }

    public Account(final AccountForm accountForm, final Address address, final Country countryAccount,
            final ParamFunc paramFuncByIdPeriodicity, final ParamFunc paramFuncByIdCurrency,
            final ParamFunc paramFuncByIdTypeAccount, final String reference, final String registerCompanyNumber,
            final String country, final Set statementTypes,
            final String vatNumberAccount, final Language idComLanguage, final Entities idEntityprivate, final Set rules, final Entities entity,
		    final String name, final Date creationDate, final Date editDate,
		    final Integer pourcentage, final String strategyDocument, final Set college, final Set signatory) {
        this.accountForm = accountForm;
        this.address = address;
        this.countryAccount = countryAccount;
        this.paramFuncByIdPeriodicity = paramFuncByIdPeriodicity;
        this.paramFuncByIdCurrency = paramFuncByIdCurrency;
        this.paramFuncByIdTypeAccount = paramFuncByIdTypeAccount;
        this.reference = reference;
        this.registerCompanyNumber = registerCompanyNumber;
        this.country = country;
//        this.accountThirdParties = accountThirdParties;
        this.statementTypes = statementTypes;
        this.vatNumberAccount = vatNumberAccount;
        this.idComLanguage = idComLanguage;
        this.rules = rules;
        this.entity = entity;
        this.name = name;
        this.creationDate = creationDate;
        this.editDate = editDate;
        this.pourcentage = pourcentage;
        this.strategyDocument = strategyDocument;
        this.college = college;
        this.signatory = signatory;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(final Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_FORM", nullable = false)
    public AccountForm getAccountForm() {
        return this.accountForm;
    }

    public void setAccountForm(final AccountForm accountForm) {
        this.accountForm = accountForm;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_ADDRESS")
    public Address getAddress() {
        return this.address;
    }

    public void setAddress(final Address address) {
        this.address = address;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_PERIODICITY", nullable = false)
    public ParamFunc getParamFuncByIdPeriodicity() {
        return this.paramFuncByIdPeriodicity;
    }

    public void setParamFuncByIdPeriodicity(final ParamFunc paramFuncByIdPeriodicity) {
        this.paramFuncByIdPeriodicity = paramFuncByIdPeriodicity;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_COUNTRY", nullable = false)
    public Country getCountryAccount() {
        return this.countryAccount;
    }

    public void setCountryAccount(final Country country) {
        this.countryAccount = country;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_CURRENCY", nullable = false)
    public ParamFunc getParamFuncByIdCurrency() {
        return this.paramFuncByIdCurrency;
    }

    public void setParamFuncByIdCurrency(final ParamFunc paramFuncByIdCurrency) {
        this.paramFuncByIdCurrency = paramFuncByIdCurrency;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_TYPE_ACCOUNT", nullable = false)
    public ParamFunc getParamFuncByIdTypeAccount() {
        return this.paramFuncByIdTypeAccount;
    }

    public void setParamFuncByIdTypeAccount(final ParamFunc paramFuncByIdTypeAccount) {
        this.paramFuncByIdTypeAccount = paramFuncByIdTypeAccount;
    }

    @Column(name = "REFERENCE", nullable = false, length = 100)
    public String getReference() {
        return this.reference;
    }

    public void setReference(final String reference) {
        this.reference = reference;
    }

    @Column(name = "REGISTER_COMPANY_NUMBER", length = 100)
    public String getRegisterCompanyNumber() {
        return this.registerCompanyNumber;
    }

    public void setRegisterCompanyNumber(final String registerCompanyNumber) {
        this.registerCompanyNumber = registerCompanyNumber;
    }

    @Column(name = "VAT_NUMBER_ACCOUNT", length = 100)
    public String getVatNumberAccount() {
        return this.vatNumberAccount;
    }

    public void setVatNumberAccount(final String vatNumberAccount) {
        this.vatNumberAccount = vatNumberAccount;
    }

    @Column(name = "COUNTRY", length = 100)
    public String getCountry() {
        return this.country;
    }

    @Column(name = "BRANCH_NAME", length = 50)
    public String getBranchName() {
        return this.branchName;
    }

    public void setBranchName(final String branchName) {
        this.branchName = branchName;
    }

    public void setCountry(final String country) {
        this.country = country;
    }

//    @OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
//    public Set<AccountThirdParty> getAccountThirdParties() {
//        return this.accountThirdParties;
//    }
//
//    public void setAccountThirdParties(final Set accountThirdParties) {
//        this.accountThirdParties = accountThirdParties;
//    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "account_statement_type", catalog = "dco", joinColumns = {@JoinColumn(name = "ACCOUNT", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "STATEMENT_TYPE", nullable = false, updatable = false)})
    public Set<ParamFunc> getStatementTypes() {
        return this.statementTypes;
    }

    public void setStatementTypes(final Set statementTypes) {
        this.statementTypes = statementTypes;
    }

    /**
     * @return the idComLanguage
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_COM_LANGUAGE")
    public Language getIdComLanguage() {
        return this.idComLanguage;
    }

    /**
     * @param idComLanguage the idComLanguage to set
     */
    public void setIdComLanguage(final Language idComLanguage) {
        this.idComLanguage = idComLanguage;
    }
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Rules> getRules() {
		return rules;
	}

	public void setRules(Set rules) {
		this.rules = rules;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "entities_ID", nullable = false, insertable = false, updatable = false)
	public Entities getEntity() {
		return entity;
	}

	public void setEntity(Entities entity) {
		this.entity = entity;
	}

	/**
	 * @return the name
	 */
	@Column(name = "NAME", length = 45)
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the creationDate
	 */
	@Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATION_DATE", length = 19)
	public Date getCreationDate() {
		return creationDate;
	}

	/**
	 * @param creationDate the creationDate to set
	 */
	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	/**
	 * @return the editDate
	 */
	@Temporal(TemporalType.TIMESTAMP)
    @Column(name = "EDIT_DATE", length = 19)
	public Date getEditDate() {
		return editDate;
	}

	/**
	 * @param editDate the editDate to set
	 */
	public void setEditDate(Date editDate) {
		this.editDate = editDate;
	}

	/**
	 * @return the pourcentage
	 */
	@Column(name = "POURCENTAGE", length = 11)
	public Integer getPourcentage() {
		return pourcentage;
	}

	/**
	 * @param pourcentage the pourcentage to set
	 */
	public void setPourcentage(Integer pourcentage) {
		this.pourcentage = pourcentage;
	}

	/**
	 * @return the strategyDocument
	 */
	@Column(name = "STRATEGY_DOCUMENT", length = 3)
	public String getStrategyDocument() {
		return strategyDocument;
	}

	/**
	 * @param strategyDocument the strategyDocument to set
	 */
	public void setStrategyDocument(String strategyDocument) {
		this.strategyDocument = strategyDocument;
	}

	/**
	 * @return the college
	 */
	@OneToMany(mappedBy = "accountG")
	@OrderBy("id ASC")
	public Set<College> getCollege() {
		return college;
	}

	/**
	 * @param college the college to set
	 */
	public void setCollege(Set college) {
		this.college = college;
	}

	/**
	 * @return the signatory
	 */
	@ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "account_signatories", catalog = "dco", joinColumns = {@JoinColumn(name = "account_ID", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "signatory_ID", nullable = false, updatable = false)})
	@OrderBy("id ASC")
	public Set<Signatory> getSignatory() {
		return signatory;
	}

	/**
	 * @param signatory the signatory to set
	 */
	public void setSignatory(Set signatory) {
		this.signatory = signatory;
	}

	/**
	 * @return the channel
	 */
	@Column(name = "CHANNEL", length = 100)
	public String getChannel() {
		return channel;
	}

	/**
	 * @param channel the channel to set
	 */
	public void setChannel(String channel) {
		this.channel = channel;
	}

	/**
	 * @return the paramFuncByIdChannel
	 */
	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ID_CHANNEL", nullable = false)
    public ParamFunc getParamFuncByIdChannel() {
		return paramFuncByIdChannel;
	}

	/**
	 * @param paramFuncByIdChannel the paramFuncByIdChannel to set
	 */
	public void setParamFuncByIdChannel(ParamFunc paramFuncByIdChannel) {
		this.paramFuncByIdChannel = paramFuncByIdChannel;
	}
}
